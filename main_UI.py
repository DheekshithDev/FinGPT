import base64
import io
import json
import time

import streamlit as st
import streamlit.components.v1 as components
from PIL.Image import Image

import assistant_model, main


# file_path = "./styles.css"
# with open(file_path, "r") as file:
#     css = file.read()
#
# st.title("ðŸ’µFinGPT")
# # st.markdown(f'<style>{css}</style>', unsafe_allow_html=True)
#
# # Display your custom HTML
# components.html(css, height=300)

def show_login_page():
    css = """
    <style>
        html, body, [class*="css"] {
            margin: 0;
            padding: 0;
            height: 100%;
            background-color: teal !important;
        }
        .container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100%;
        }
        .login-box {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            width: 300px;
        }
        .stTextInput>div>div>input {
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ccc;
        }
        .stButton>button {
            width: 100%;
            padding: 10px;
            border-radius: 5px;
            border: none;
            background-color: #007BFF;
            color: white;
        }
    </style>
    """
    # Inject the CSS with markdown
    st.markdown(css, unsafe_allow_html=True)

    # Create container for the login box
    container = st.container()
    col1, col2, col3 = container.columns([1, 2, 1])
    with col2:
        st.markdown("## FinGPT", unsafe_allow_html=True)
        username = st.text_input("Username")
        password = st.text_input("Password", type="password")
        if st.button("Login"):
            if username in users_dict and password == users_dict[username][0]:  # 0th element is password in this dict list
                st.session_state['logged_in'] = True
                # show_main_page()
                st.session_state.username = username
                st.session_state.password = password
                st.session_state.user_name = users_dict[username][1]
                st.session_state.tolerance = users_dict[username][2]
            else:
                st.error("Incorrect Username or Password")


def show_main_page():
    # CSS for the custom box
    css = """
    <style>
        .custom-box {
            background-color: #AFEEEE;  /* Teal background color for the message box */
            color: #000000;  /* Black text color */
            padding: 20px;  /* Padding inside the message box */
            margin-top: 20px;  /* Margin above the message box */
            margin-bottom: 5px;  /* Smaller bottom margin for visual separation from the input box */
            border-radius: 10px;  /* Rounded corners for the message box */
            height: 300px;
            width: 700px;
            overflow: scroll;
        }
        .stTextInput, .stButton {
            margin-top: -20px;  /* Negative margin to pull the message box up closer */
        }
    </style>
    """
    # Inject CSS with Markdown for styling
    # st.markdown(css, unsafe_allow_html=True)
    st.title("ðŸ’µFinGPT")

    # SideBar
    general_sidebar = st.sidebar.button("Logout")

    # Title and content within a custom styled box
    st.subheader(f"Welcome to FinGPT {st.session_state.manager_obj.name}! Feel free to ask any investment questions you have and relaxâ€”we're here to guide you every step of the way!",
                 divider='blue')
    # st.markdown(f"""
    #     <div>
    #         Welcome to FinGPT {st.session_state.manager_obj.name}! Feel free to ask any investment questions you have and relaxâ€”we're here to guide you every step of the way!
    #     </div>
    # """, unsafe_allow_html=True)

    # Initialize session state for messages if not present
    if "chat" not in st.session_state:
        st.session_state["chat"] = []
    # if "images" not in st.session_state:
    #     st.session_state["images"] =

    # if st.session_state["chat"]:
    #     st.markdown(
    #         "<div class=\"message-box\">" +
    #         "".join(f"<p><b>{msg['role']}:</b> {msg['content']}</p>" for msg in st.session_state["chat"]) +
    #         "</div>", unsafe_allow_html=True
    #     )

    # Handle chat input and response using OpenAI
    for msg in st.session_state.chat:
        if "file-" in msg['content']:
            image_data = st.session_state.manager_obj.client.files.content(msg['content'])
            image_data_bytes = image_data.read()
            st.chat_message(msg["role"]).image(image_data_bytes, caption="Graph generated by FinGPT")
        else:
            st.chat_message(msg["role"]).write(msg["content"])

    if prompt := st.chat_input("Start typing to ask questions"):
        st.session_state.manager_obj.add_msg_to_thread(role="user", content=prompt)  # 3
        st.session_state.chat.append({"role": "user", "content": prompt})
        st.chat_message("user").write(prompt)
        with st.spinner(text="Answering your question..."):
            # NEED TO IMPLEMENT - BLOCK CHAT BOX WHEN ASSISTANT IS GENERATING ANSWER
            st.session_state.manager_obj.initiate_run()  # 4
            answer = st.session_state.manager_obj.wait_for_completed()  # 5
        if answer:
            disp_answer = answer['assistant']
            st.session_state.chat.append({"role": "ai", "content": disp_answer})
            print("ANSWER:::: ", answer, type(answer))
            if "file-" in disp_answer:
                image_data = st.session_state.manager_obj.client.files.content(disp_answer)
                image_data_bytes = image_data.read()
                st.chat_message("ai").image(image_data_bytes, caption="Graph generated by FinGPT")
            else:
                st.chat_message("ai").write(disp_answer)
            # if isinstance(disp_answer, str):
            #     st.chat_message("ai").write(disp_answer)
            # elif isinstance(disp_answer, file):
            #     # Handle image content
            #     image_data = base64.b64decode(answer.image_data)
            #     image = Image.open(io.BytesIO(image_data))
            #     st.image(image, caption="Graph generated by AI")


if __name__ == "__main__":
    filepath = "investor_profiles.json"

    with open(filepath, 'r') as file:
        investor_data = json.load(file)

    investors_list = investor_data["users"]

    users_dict = {}

    for user in investors_list:
        username = user["username"]
        password = user["password"]
        name = user["name"]
        tolerance = user["tolerance"]
        users_dict[username] = [password, name, tolerance]  # 0 element is pass, 1st name, 2nd tolerance

    if 'logged_in' not in st.session_state:
        st.session_state['logged_in'] = False

    if 'manager_obj' not in st.session_state:
        st.session_state['manager_obj'] = None

    # Page rendering based on login status
    if st.session_state['logged_in']:
        investor_username = st.session_state["username"]
        investor_password = st.session_state["password"]
        investor_name = st.session_state["user_name"]
        investor_tolerance = st.session_state["tolerance"]

        if not st.session_state.manager_obj:
            manager_obj = assistant_model.AssistantManager(
                name=investor_name, username=investor_username, password=investor_password, tolerance=investor_tolerance)
            # Assign manager_obj to session_state
            st.session_state.manager_obj = manager_obj

        show_main_page()
    else:
        show_login_page()




